from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
import keyboards
import sqlite3

language = ['–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞', '–†—É—Å—Å–∫–∏–π', 'English']
digits = '0123456789 +-'

bot = Bot(token='')
dp = Dispatcher(bot)

meeting_date = ["day", "start", "end"]
meeting_registration = False
low_hour = 0


@dp.message_handler(commands=['start'])
async def start_menu(message: types.Message):
    await bot.send_message(message.chat.id, f'–î–æ–±—Ä–æ–≥–æ –¥–Ω—è, {message.from_user.first_name}!\n–©–æ –í–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?',
                           reply_markup=keyboards.markup_1)


@dp.message_handler(Text(equals='üë•–•–æ—á—É –ø–æ—Ç—Ä–∞–ø–∏—Ç–∏ –¥–æ –≤–∞—Å –Ω–∞ –∑—É—Å—Ç—Ä—ñ—á'))
async def meeting_process(message: types.Message):
    global meeting_registration
    meeting_registration = True
    await bot.send_message(message.chat.id, f'–ü–æ—Ç—Ä–∞–ø–∏—Ç–∏ –¥–æ –Ω–∞—Å —É —Å–∞–ª–æ–Ω –º–æ–∂–Ω–∞ –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—é –¥–æ–º–æ–≤–ª–µ–Ω—ñ—Å—Ç—é.\n'
                                            f'–£—Å—ñ –∑—É—Å—Ç—Ä—ñ—á—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —Å–ø–ª–∞–Ω—É–≤–∞—Ç–∏ —Ö–æ—á–∞ –± –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å –¥–æ –≤—ñ–∑–∏—Ç—É.\n'
                                            f'–°–∫–∞–∂—ñ—Ç—å –±—É–¥—å-–ª–∞—Å–∫–∞, —É —è–∫–∏–π –¥–µ–Ω—å –í–∏ —Ö–æ—Ç—ñ–ª–∏ –± –ø—Ä–∏–π—Ç–∏ –¥–æ –Ω–∞—Å?',
                           reply_markup=keyboards.markup_2)


@dp.message_handler(Text(keyboards.buttons_2))
async def get_meeting_start(message: types.Message):
    if meeting_registration:
        meeting_date[0] = message.text
        await bot.send_message(message.chat.id, f'–ö–ª–∞—Å, {message.text}!'
                                                f'\n–ó –∫–æ—Ç—Ä–æ—ó –≥–æ–¥–∏–Ω–∏ –≤–∏ –º–æ–≥–ª–∏ –± –ø—ñ–¥—ó—Ö–∞—Ç–∏ –¥–æ –Ω–∞—Å?',
                               reply_markup=keyboards.markup_3)
    else:
        pass


@dp.message_handler(Text(keyboards.buttons_3))
async def get_meeting_end(message: types.Message):
    if meeting_registration:
        if message.text == keyboards.buttons_3[-1]:
            await bot.send_message(message.chat.id, f'–£ —è–∫–∏–π –¥–µ–Ω—å –í–∏ —Ö–æ—Ç—ñ–ª–∏ –± –ø—Ä–∏–π—Ç–∏ –¥–æ –Ω–∞—Å?',
                                   reply_markup=keyboards.markup_2)
        else:
            global low_hour
            low_hour = int(message.text[2:4])
            meeting_date[1] = message.text
            await bot.send_message(message.chat.id, f'–°—É–ø–µ—Ä, {message.text}.\n–î–æ –∫–æ—Ç—Ä–æ—ó –≥–æ–¥–∏–Ω–∏ –º–∞—î—Ç–µ —á–∞—Å?',
                                   reply_markup=keyboards.markup_4)
    else:
        pass


@dp.message_handler(Text(keyboards.buttons_4))
async def get_meeting_accept(message: types.Message):
    if meeting_registration:
        if message.text == keyboards.buttons_4[-1]:
            await bot.send_message(message.chat.id, f'–ó –∫–æ—Ç—Ä–æ—ó –≥–æ–¥–∏–Ω–∏ –≤–∏ –º–æ–≥–ª–∏ –± –ø—ñ–¥—ó—Ö–∞—Ç–∏ –¥–æ –Ω–∞—Å?',
                                   reply_markup=keyboards.markup_3)
        else:
            if int(meeting_date[1][2:4]) > int(message.text[3:5]):
                await bot.send_message(message.chat.id, f'–•–º–º, —Å–ø–æ—á–∞—Ç–∫—É –≤–∫–∞–∂—ñ—Ç—å —á–∞—Å –ø–æ—á–∞—Ç–∫—É, –ø–æ—Ç—ñ–º –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è, –∞ –Ω–µ –Ω–∞–≤–ø–∞–∫–∏.',
                                       reply_markup=keyboards.markup_3)
            else:
                meeting_date[2] = message.text
                await bot.send_message(message.chat.id, f'–í–∏ –±–∞–∂–∞—î—Ç–µ –∑—É—Å—Ç—Ä—ñ—Ç–∏—Å—å —É {meeting_date[0]}, {meeting_date[1]} {meeting_date[2]}?',
                                       reply_markup=keyboards.markup_5)
    else:
        pass


@dp.message_handler(Text(keyboards.buttons_5))
async def get_number(message: types.Message):
    global meeting_registration
    if meeting_registration:
        if message.text == keyboards.buttons_5[0]:
            global decision
            decision = True
            await bot.send_message(message.chat.id, f'ü§ó –£—Ä–∞! –í–∏–π—à–ª–æ!'
                                                    f'–ú–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –í–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ –∑—É—Å—Ç—Ä—ñ—á.\n'
                                                    f'–ü—ñ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—è –∑—É—Å—Ç—Ä—ñ—á—ñ –≤–∏–∫–æ–Ω–∞—î –º–µ–Ω–µ–¥–∂–µ—Ä, —è–∫–∏–π –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É—î –í–∞–º'
                                                    f', —â–æ–π–Ω–æ –º–∞—Ç–∏–º–µ –Ω–∞–≥–æ–¥—É.\n'
                                                    f'–ë—É–¥—å-–ª–∞—Å–∫–∞, –∑–∞–ª–∏—à—Ç–µ —Å–≤—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, –¥–ª—è –∑–≤‚Äô—è–∑–∫—É '
                                                    f'–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.', reply_markup=keyboards.markup_6)
        elif message.text == keyboards.buttons_5[1]:
            await bot.send_message(message.chat.id, f'–î–æ–±—Ä–µ, —Ç–æ–¥—ñ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑, –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π –ø—É–Ω–∫—Ç –º–µ–Ω—é.',
                                   reply_markup=keyboards.markup_1)
            meeting_registration = False


@dp.message_handler(content_types=['contact'])
async def get_number(message: types.Message):
    global meeting_registration
    if meeting_registration:
        await bot.send_message(message.chat.id, f'–î—è–∫—É—î–º–æ, {message.chat.first_name}.\n'
                                                f'–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤‚Äô—è–∂–µ—Ç—å—Å—è –∑ –í–∞–º–∏ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n'
                                                f'{message.contact.phone_number}')
        await bot.send_message(message.chat.id, f'–Ø–∫—â–æ –í–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å —â–æ—Å—å —â–µ - –æ–±–µ—Ä—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π –ø—É–Ω–∫—Ç –º–µ–Ω—é.',
                               reply_markup=keyboards.markup_1)
        meeting_registration = False
    else:
        pass


if __name__ == '__main__':
    executor.start_polling(dp)
